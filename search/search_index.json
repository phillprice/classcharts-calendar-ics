{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ClassCharts Calendar Sync","text":"<p>A serverless application that automatically syncs ClassCharts timetable data to iCalendar files, making school schedules easily accessible across all calendar applications. The system fetches data from ClassCharts and generates calendar files that are hosted on Amazon S3, allowing seamless subscription from Apple Calendar, Google Calendar, Outlook, and other calendar applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Automatic Syncing: Updates calendars every 6 hours to keep timetables current</li> <li>Multi-Student Support: Manage calendars for multiple students from a single account</li> <li>Secure Credential Storage: Uses AWS Secrets Manager for secure credential management</li> <li>Universal Calendar Access: Compatible with any calendar app that supports iCal subscription</li> <li>Local Testing: Test functionality without AWS credentials using local mode</li> <li>Easy Deployment: Simple deployment with AWS SAM (Serverless Application Model)</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started - Quick setup guide</li> <li>Configuration - Configure environment variables and AWS resources</li> <li>Deployment - Deploy the application to AWS</li> <li>Development - Local development instructions</li> <li>Calendar Usage - Access and use the generated calendars</li> <li>Project Information - Project structure and contribution guidelines</li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>The ClassCharts Calendar Sync application uses AWS Lambda to periodically fetch data from the ClassCharts API and generate iCalendar files that are stored in Amazon S3. The generated calendar files are then available via public URLs that can be subscribed to from any calendar application.</p> <pre><code>graph LR\n    A[AWS Lambda Function] --&gt;|Run every 6 hours| B[ClassCharts API]\n    B --&gt;|Retrieve timetable data| A\n    A --&gt;|Generate iCalendar files| C[Amazon S3 Bucket]\n    D[Calendar Apps] --&gt;|Subscribe to| C\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you quickly set up the ClassCharts Calendar Sync application on your AWS account.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p>"},{"location":"getting-started/#required","title":"Required","text":"<ul> <li>Python 3.9+ (3.12 recommended)</li> <li>pip package manager (included with Python)</li> <li>An AWS account with appropriate permissions:</li> <li>Lambda: Create and manage functions</li> <li>S3: Create buckets and manage objects</li> <li>IAM: Create roles and policies</li> <li>Secrets Manager: Create and access secrets</li> <li>ClassCharts parent account credentials</li> </ul>"},{"location":"getting-started/#development-tools","title":"Development Tools","text":"<ul> <li>AWS CLI: For interacting with AWS services</li> <li>AWS SAM CLI: For local testing and deployment</li> <li>Git: For version control (optional)</li> </ul>"},{"location":"getting-started/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/phillprice/classcharts-calendar-ics.git\ncd classcharts-calendar-ics\n</code></pre>"},{"location":"getting-started/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Create a virtual environment (optional but recommended)\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/#3-configure-aws-credentials","title":"3. Configure AWS Credentials","text":"<p>If you haven't configured AWS CLI yet:</p> <pre><code>aws configure\n</code></pre> <p>You'll be prompted to enter: - AWS Access Key ID - AWS Secret Access Key - Default region (e.g., eu-west-2) - Default output format (json recommended)</p>"},{"location":"getting-started/#4-create-aws-secrets-manager-secret","title":"4. Create AWS Secrets Manager Secret","text":"<p>Store your ClassCharts credentials in AWS Secrets Manager:</p> <pre><code>aws secretsmanager create-secret \\\n    --name classcharts/credentials \\\n    --secret-string '{\"email\":\"your-email@example.com\",\"password\":\"your-password\",\"student_ids\":[1234567, 7654321]}' \\\n    --region eu-west-2\n</code></pre> <p>Multiple Students</p> <p>The <code>student_ids</code> field accepts an array of student IDs for supporting multiple students.</p>"},{"location":"getting-started/#5-build-and-deploy","title":"5. Build and Deploy","text":"<pre><code># Build the SAM application\nsam build\n\n# Deploy with guided setup\nsam deploy --guided\n</code></pre> <p>During the guided setup, you'll be asked to: - Enter a stack name (e.g., <code>classcharts-calendar</code>) - Choose an AWS region - Configure deployment parameters - Confirm IAM role creation</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>After deployment, you should have:</p> <ol> <li>A Lambda function that runs every 6 hours</li> <li>An S3 bucket containing your calendar files</li> <li>Public URLs for each student's calendar</li> </ol> <p>Now you can:</p> <ul> <li>Add the calendars to your applications</li> <li>Configure environment variables</li> <li>Learn about local development</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>The ClassCharts Calendar Sync application uses a layered configuration approach:</p>"},{"location":"configuration/#configuration-layers","title":"Configuration Layers","text":"Layer Purpose How to Configure Environment Variables Runtime configuration Set during deployment or for local testing AWS Secrets Manager Sensitive credentials Securely store ClassCharts credentials SAM Parameters Deployment configuration Override during <code>sam deploy</code>"},{"location":"configuration/#configuration-files","title":"Configuration Files","text":"File Purpose Notes <code>config.py</code> Central configuration module Contains defaults with environment variable overrides <code>template.yaml</code> SAM infrastructure definition Defines AWS resources and their configuration"},{"location":"configuration/#overview-of-configuration-areas","title":"Overview of Configuration Areas","text":""},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>The application uses environment variables for runtime configuration. These can be set: - During deployment via SAM template - For local development via shell environment - For local testing via environment variable overrides</p> <p>Learn more about Environment Variables \u2192</p>"},{"location":"configuration/#aws-secrets-manager","title":"AWS Secrets Manager","text":"<p>Sensitive credentials like ClassCharts login information are stored in AWS Secrets Manager to keep them secure and separate from the codebase.</p> <p>Learn more about AWS Secrets Manager configuration \u2192</p>"},{"location":"configuration/#sam-parameters","title":"SAM Parameters","text":"<p>When deploying with AWS SAM, you can customize various aspects of the application, such as: - S3 bucket name - Calendar filename templates - Secret name paths</p> <p>Learn more about SAM Parameters \u2192</p>"},{"location":"configuration/environment-variables/","title":"Environment Variables","text":"<p>The ClassCharts Calendar Sync application uses environment variables for configuration. These variables can be set in different ways depending on whether you're running in production or local development environments.</p>"},{"location":"configuration/environment-variables/#production-environment-variables","title":"Production Environment Variables","text":"<p>These variables are set during deployment and used in the Lambda environment:</p> Variable Default Description Required <code>AWS_REGION</code> <code>eu-west-2</code> AWS region for operations Auto-set by Lambda <code>BUCKET_NAME</code> <code>classcharts-calendar-{account-id}</code> S3 bucket name for calendars Yes <code>CALENDAR_FILENAME_TEMPLATE</code> <code>{student_id}.ics</code> Template for calendar filenames No <code>SECRET_NAME</code> <code>classcharts/credentials</code> Name for credentials in Secrets Manager Yes"},{"location":"configuration/environment-variables/#local-testing-environment-variables","title":"Local Testing Environment Variables","text":"<p>These variables are for local development and testing without AWS resources:</p> Variable Default Description Required for Local Testing <code>LOCAL_TESTING</code> <code>false</code> Set to <code>true</code> to enable local testing mode Yes <code>TEST_EMAIL</code> None ClassCharts parent account email Yes <code>TEST_PASSWORD</code> None ClassCharts parent account password Yes <code>TEST_STUDENT_ID</code> None ClassCharts student ID Yes"},{"location":"configuration/environment-variables/#setting-environment-variables","title":"Setting Environment Variables","text":""},{"location":"configuration/environment-variables/#in-aws-lambda-production","title":"In AWS Lambda (Production)","text":"<p>Environment variables in production are set via the SAM template:</p> <pre><code># From template.yaml\nEnvironment:\n  Variables:\n    BUCKET_NAME: !Ref ClasschartsCalendarBucket\n    CALENDAR_FILENAME_TEMPLATE: !Ref CalendarFilenameTemplate\n    SECRET_NAME: !Ref SecretName\n    AWS_ACCOUNT_ID: !Ref AWS::AccountId\n</code></pre>"},{"location":"configuration/environment-variables/#for-local-testing","title":"For Local Testing","text":""},{"location":"configuration/environment-variables/#linuxmacos","title":"Linux/macOS:","text":"<pre><code>export LOCAL_TESTING=true\nexport TEST_EMAIL=\"your-classcharts-email@example.com\"\nexport TEST_PASSWORD=\"your-classcharts-password\"\nexport TEST_STUDENT_ID=\"your-student-id\"\n</code></pre>"},{"location":"configuration/environment-variables/#windows-cmd","title":"Windows (CMD):","text":"<pre><code>set LOCAL_TESTING=true\nset TEST_EMAIL=your-classcharts-email@example.com\nset TEST_PASSWORD=your-classcharts-password\nset TEST_STUDENT_ID=your-student-id\n</code></pre>"},{"location":"configuration/environment-variables/#windows-powershell","title":"Windows (PowerShell):","text":"<pre><code>$env:LOCAL_TESTING=\"true\"\n$env:TEST_EMAIL=\"your-classcharts-email@example.com\"\n$env:TEST_PASSWORD=\"your-classcharts-password\"\n$env:TEST_STUDENT_ID=\"your-student-id\"\n</code></pre>"},{"location":"configuration/environment-variables/#environment-variable-templates","title":"Environment Variable Templates","text":""},{"location":"configuration/environment-variables/#filename-template","title":"Filename Template","text":"<p>The <code>CALENDAR_FILENAME_TEMPLATE</code> variable supports placeholders:</p> <ul> <li><code>{student_id}</code> - The numeric student ID from ClassCharts</li> <li><code>{student_name}</code> - The student's name, with spaces replaced by underscores</li> </ul> <p>Example templates: <pre><code>{student_id}.ics                  # 7419922.ics\n{student_name}_{student_id}.ics   # john_smith_7419922.ics\ncalendar_{student_name}.ics       # calendar_john_smith.ics\n</code></pre></p>"},{"location":"configuration/environment-variables/#notes","title":"Notes","text":"<ul> <li><code>AWS_REGION</code> is automatically set by AWS Lambda in production. The environment variable is only used for local development.</li> <li>In local testing mode, calendar files are created in the local <code>/tmp</code> directory instead of being uploaded to S3.</li> <li>When <code>LOCAL_TESTING=true</code>, AWS Secrets Manager is not used, and credentials are read from environment variables instead.</li> </ul>"},{"location":"configuration/sam-parameters/","title":"SAM Parameters","text":"<p>AWS SAM (Serverless Application Model) allows you to customize the deployment of the ClassCharts Calendar Sync application through parameters.</p>"},{"location":"configuration/sam-parameters/#available-parameters","title":"Available Parameters","text":"<p>The following parameters can be customized during deployment:</p> Parameter Default Description Example Override <code>Environment</code> <code>dev</code> Environment name (dev, prod, etc.) <code>prod</code> <code>BucketName</code> <code>classcharts-calendar</code> S3 bucket base name <code>my-school-calendar</code> <code>CalendarFilenameTemplate</code> <code>{student_id}.ics</code> Format for calendar filenames <code>{student_name}_{student_id}.ics</code> <code>SecretName</code> <code>classcharts/credentials</code> Name of the secret in Secrets Manager <code>my/classcharts/creds</code>"},{"location":"configuration/sam-parameters/#parameter-details","title":"Parameter Details","text":""},{"location":"configuration/sam-parameters/#environment","title":"Environment","text":"<p>The <code>Environment</code> parameter specifies the deployment environment, such as \"dev\" or \"prod\". This is used in resource naming to prevent conflicts between different deployments.</p> <p>Example: <pre><code>sam deploy --parameter-overrides Environment=prod\n</code></pre></p>"},{"location":"configuration/sam-parameters/#bucketname","title":"BucketName","text":"<p>The <code>BucketName</code> parameter sets the base name for the S3 bucket where calendar files are stored. The actual bucket name will be:</p> <pre><code>{BucketName}-{Environment}-{AWS::AccountId}\n</code></pre> <p>Example: <pre><code>sam deploy --parameter-overrides BucketName=school-calendars\n</code></pre></p> <p>This would create a bucket named <code>school-calendars-dev-123456789012</code> for a dev environment.</p>"},{"location":"configuration/sam-parameters/#calendarfilenametemplate","title":"CalendarFilenameTemplate","text":"<p>The <code>CalendarFilenameTemplate</code> parameter specifies the naming pattern for calendar files. It supports the following placeholders:</p> <ul> <li><code>{student_id}</code> - The ClassCharts student ID</li> <li><code>{student_name}</code> - The student's name with spaces replaced by underscores</li> </ul> <p>Example: <pre><code>sam deploy --parameter-overrides CalendarFilenameTemplate=\"{student_name}_{student_id}.ics\"\n</code></pre></p> <p>This would create filenames like <code>john_smith_1234567.ics</code>.</p>"},{"location":"configuration/sam-parameters/#secretname","title":"SecretName","text":"<p>The <code>SecretName</code> parameter specifies the name of the secret in AWS Secrets Manager where ClassCharts credentials are stored.</p> <p>Example: <pre><code>sam deploy --parameter-overrides SecretName=\"school/classcharts/credentials\"\n</code></pre></p>"},{"location":"configuration/sam-parameters/#using-parameter-overrides","title":"Using Parameter Overrides","text":""},{"location":"configuration/sam-parameters/#single-parameter-override","title":"Single Parameter Override","text":"<pre><code>sam deploy --parameter-overrides Environment=prod\n</code></pre>"},{"location":"configuration/sam-parameters/#multiple-parameter-overrides","title":"Multiple Parameter Overrides","text":"<pre><code>sam deploy --parameter-overrides \\\n  Environment=prod \\\n  BucketName=school-calendars \\\n  CalendarFilenameTemplate=\"{student_name}.ics\"\n</code></pre>"},{"location":"configuration/sam-parameters/#with-specific-profile","title":"With Specific Profile","text":"<pre><code>sam deploy --profile school-admin --parameter-overrides Environment=prod\n</code></pre>"},{"location":"configuration/sam-parameters/#using-a-configuration-file","title":"Using a Configuration File","text":"<p>You can also create a <code>samconfig.toml</code> file in your project directory to specify default parameter values:</p> <pre><code>version = 0.1\n[default]\n[default.deploy]\n[default.deploy.parameters]\nstack_name = \"classcharts-calendar\"\ns3_bucket = \"aws-sam-cli-managed-default-samclisourcebucket-1234567890ab\"\ns3_prefix = \"classcharts-calendar\"\nregion = \"eu-west-2\"\ncapabilities = \"CAPABILITY_IAM\"\nparameter_overrides = \"Environment=dev BucketName=school-calendar\"\nconfirm_changeset = true\n</code></pre>"},{"location":"configuration/secrets-manager/","title":"AWS Secrets Manager Configuration","text":"<p>The ClassCharts Calendar Sync application uses AWS Secrets Manager to securely store ClassCharts credentials. This keeps sensitive information like passwords out of your code and configuration files.</p>"},{"location":"configuration/secrets-manager/#secret-format","title":"Secret Format","text":"<p>The application expects secrets to be stored in JSON format with specific fields.</p>"},{"location":"configuration/secrets-manager/#for-multiple-students-recommended","title":"For Multiple Students (Recommended)","text":"<pre><code>{\n  \"email\": \"your-classcharts-email@example.com\",\n  \"password\": \"your-classcharts-password\",\n  \"student_ids\": [1234562, 7654321]\n}\n</code></pre>"},{"location":"configuration/secrets-manager/#for-a-single-student-legacy-format","title":"For a Single Student (Legacy Format)","text":"<pre><code>{\n  \"email\": \"your-classcharts-email@example.com\",\n  \"password\": \"your-classcharts-password\",\n  \"student_id\": 1234562\n}\n</code></pre> <p>Note</p> <p>The legacy format with <code>student_id</code> is supported for backward compatibility. New deployments should use the <code>student_ids</code> array format.</p>"},{"location":"configuration/secrets-manager/#creating-the-secret","title":"Creating the Secret","text":"<p>You can create the secret using the AWS CLI:</p> <pre><code>aws secretsmanager create-secret \\\n    --name classcharts/credentials \\\n    --secret-string '{\n      \"email\":\"your-email@example.com\",\n      \"password\":\"your-password\",\n      \"student_ids\":[1234562, 7654321]\n    }' \\\n    --region eu-west-2\n</code></pre> <p>To use a specific profile:</p> <pre><code>aws secretsmanager create-secret \\\n    --profile your-aws-profile \\\n    --name classcharts/credentials \\\n    --secret-string '{\n      \"email\":\"your-email@example.com\",\n      \"password\":\"your-password\",\n      \"student_ids\":[1234562]\n    }' \\\n    --region eu-west-2\n</code></pre>"},{"location":"configuration/secrets-manager/#secret-location","title":"Secret Location","text":"<p>The Lambda function accesses the secret using the name specified in the <code>SECRET_NAME</code> environment variable. By default, this is <code>classcharts/credentials</code>.</p> <p>You can change the secret name by:</p> <ol> <li>Updating the <code>SECRET_NAME</code> environment variable in the template</li> <li>Using the <code>--parameter-overrides</code> flag during deployment</li> </ol> <pre><code>sam deploy --parameter-overrides SecretName=my/custom/secret/path\n</code></pre>"},{"location":"configuration/secrets-manager/#iam-permissions","title":"IAM Permissions","text":"<p>The Lambda function requires permissions to read the secret from AWS Secrets Manager. The SAM template includes the necessary IAM policy:</p> <pre><code>Policies:\n  - Version: '2012-10-17'\n    Statement:\n      - Effect: Allow\n        Action:\n          - secretsmanager:GetSecretValue\n        Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}*'\n</code></pre>"},{"location":"configuration/secrets-manager/#security-considerations","title":"Security Considerations","text":"<ul> <li>Never commit your credentials to version control</li> <li>Use IAM policies to restrict access to the secret</li> <li>Consider enabling rotation for the secret (though this would require manual updates to ClassCharts credentials)</li> <li>When testing locally, use environment variables instead of creating development secrets</li> </ul>"},{"location":"deployment/","title":"Deployment","text":"<p>This section covers how to deploy the ClassCharts Calendar Sync application to AWS.</p>"},{"location":"deployment/#deployment-options","title":"Deployment Options","text":"<ul> <li>Standard Deployment - The recommended approach for most users</li> <li>Advanced Options - Custom configurations, profiles, and parameters</li> <li>Troubleshooting - Resolving common deployment issues</li> </ul>"},{"location":"deployment/#deployment-overview","title":"Deployment Overview","text":"<p>The ClassCharts Calendar Sync application is deployed as an AWS Serverless application consisting of:</p> <ol> <li>AWS Lambda Function - Runs the calendar synchronization code</li> <li>Amazon S3 Bucket - Stores the generated calendar files</li> <li>CloudWatch Events Rule - Triggers the Lambda function every 6 hours</li> <li>IAM Role and Policies - Provides the necessary permissions</li> </ol>"},{"location":"deployment/#deployment-process","title":"Deployment Process","text":"<p>The deployment process uses the AWS Serverless Application Model (SAM) to deploy the application:</p> <ol> <li>Build - Packages the code and dependencies into a deployment package</li> <li>Deploy - Creates or updates the AWS CloudFormation stack</li> </ol> <pre><code># Build the application\nsam build\n\n# Deploy with guided setup\nsam deploy --guided\n</code></pre>"},{"location":"deployment/#deployment-requirements","title":"Deployment Requirements","text":"<p>Before deploying, ensure you have:</p> <ol> <li>AWS CLI and SAM CLI installed and configured</li> <li>AWS credentials with appropriate permissions</li> <li>ClassCharts credentials stored in AWS Secrets Manager</li> </ol> <p>See the Getting Started guide for detailed instructions on setting up these requirements.</p>"},{"location":"project/structure/","title":"Project Structure","text":"<p>This page explains the structure of the ClassCharts Calendar Sync project files and directories.</p>"},{"location":"project/structure/#directory-structure","title":"Directory Structure","text":"<pre><code>.\n\u251c\u2500\u2500 .github/workflows/     # GitHub Actions CI/CD workflows\n\u2502   \u251c\u2500\u2500 sam-deploy.yml    # Automated deployment workflow\n\u2502   \u2514\u2500\u2500 test.yml          # Automated testing workflow\n\u251c\u2500\u2500 tests/                # Test files\n\u2502   \u251c\u2500\u2500 conftest.py       # Test configuration and fixtures\n\u2502   \u2514\u2500\u2500 test_main.py      # Main application tests\n\u251c\u2500\u2500 .aws-sam/            # SAM build artifacts (generated)\n\u251c\u2500\u2500 .gitignore            # Git ignore file\n\u251c\u2500\u2500 CONTRIBUTING.md        # Contribution guidelines\n\u251c\u2500\u2500 LICENSE               # MIT License file\n\u251c\u2500\u2500 README.md             # Project documentation\n\u251c\u2500\u2500 config.py             # Configuration settings\n\u251c\u2500\u2500 main.py               # Lambda function core code\n\u251c\u2500\u2500 pytest.ini            # Pytest configuration\n\u251c\u2500\u2500 requirements.txt      # Python dependencies\n\u251c\u2500\u2500 samconfig.toml        # SAM CLI configuration\n\u2514\u2500\u2500 template.yaml         # SAM template for AWS resources\n</code></pre>"},{"location":"project/structure/#key-files-and-components","title":"Key Files and Components","text":""},{"location":"project/structure/#core-files","title":"Core Files","text":"File Description <code>main.py</code> The main application code that runs in the Lambda function <code>config.py</code> Configuration module that manages environment variables and defaults <code>template.yaml</code> SAM template that defines all AWS resources <code>requirements.txt</code> Python package dependencies"},{"location":"project/structure/#configuration-files","title":"Configuration Files","text":"File Description <code>samconfig.toml</code> SAM CLI configuration for deployments <code>pytest.ini</code> Configuration for the pytest testing framework <code>.gitignore</code> Specifies files to exclude from Git version control"},{"location":"project/structure/#documentation-files","title":"Documentation Files","text":"File Description <code>README.md</code> Basic project overview and quick start guide <code>CONTRIBUTING.md</code> Guidelines for contributing to the project <code>LICENSE</code> MIT License for the project"},{"location":"project/structure/#test-files","title":"Test Files","text":"File Description <code>tests/conftest.py</code> Pytest fixtures and configuration <code>tests/test_main.py</code> Unit tests for the main application code"},{"location":"project/structure/#github-workflows","title":"GitHub Workflows","text":"File Description <code>.github/workflows/test.yml</code> Runs automated tests on pull requests and pushes <code>.github/workflows/sam-deploy.yml</code> Deploys the application to AWS on pushes to the main branch"},{"location":"project/structure/#code-organization","title":"Code Organization","text":"<p>The project follows a simple structure:</p> <ul> <li><code>main.py</code> contains all the application logic, including:</li> <li><code>get_secrets()</code> - Retrieves credentials from AWS Secrets Manager</li> <li><code>generate_calendar_for_student()</code> - Creates calendars for each student</li> <li> <p><code>lambda_handler()</code> - Main entry point for the Lambda function</p> </li> <li> <p><code>config.py</code> centralizes all configuration settings, with:</p> </li> <li>Environment variables with defaults</li> <li>Constants for ClassCharts API interactions</li> <li>Path templates for file storage</li> </ul>"}]}